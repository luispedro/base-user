#!/usr/bin/env python

import sys
import os
from pipes import quote
import random

def create_directories(dname):
    '''
    create_directories(dname)

    Recursively create directories.
    '''
    from os import path, mkdir, errno
    if dname.endswith('/'):
        dname = dname[:-1]
    if not dname:
        return
    head, tail = path.split(dname)
    if head: create_directories(head)
    try:
        mkdir(dname)
    except OSError, e:
        if e.errno != errno.EEXIST:
            raise

home = os.environ["HOME"]

def slug():
    chars="qwertyuiopasdfghjklxzxcvbnm1234567890QWERTYUIOPASDFGHJKLXZXCVBNM"
    return ''.join([random.choice(chars) for i in xrange(8)])

def write_shell_script(args, options):
    command = " ".join(map(quote, args))
    code = slug()
    outputname = home + '/.qarray-pid/scripts/q%s.sh' % code
    logname = home + '/.qarray-pid/%s.log' % code
    output = file(outputname, 'w')
    name = "_".join(args)
    name = name.replace(' ', '_')
    if name.startswith("jug_execute_"):
        name = "j_" + name[len("jug_execute_"):]
    name = "%s.%s" % (code,name)
    name = name[:15]
    extra_headers = ''
    for opt in options:
        if opt.startswith('--cpus='):
            nr_cpus = opt[len('--cpus='):]
            extra_headers += ('#PBS -l ncpus=%s\n' % nr_cpus)
        elif opt.startswith('--mem='):
            mem = opt[len('--mem='):]
            extra_headers += ('#PBS -l mem=%s\n' % mem)
        elif opt.startswith('--hours='):
            nr_hours = opt[len('--hours='):]
            extra_headers += ('#PBS -l walltime=%s:00:00\n' % nr_hours)
        else:
            raise ValueError('misunderstood option: ' + opt)
    print >>output, '''
#!/bin/bash
#
#PBS -N %s
#PBS -S /bin/bash
#PBS -V
%s

#PBS -o q___%s.out
#PBS -e q___%s.err

''' % (name, extra_headers, code, code)
    print >>output,'''

echo
echo
echo "HOSTNAME:$HOSTNAME"
echo
echo

cd %s

%s

# self-destruct
rm %s
rm %s

''' % (os.getcwd(), command, outputname, logname)
    output.close()

    log = file(logname, 'w')
    print >>log, command
    print >>log, outputname
    log.close()
    return outputname


def usage():
    print '''\
----------------------
Usage : qarray [extra_args] command
----------------------


EXAMPLES
   qarray command...
   qarray --cpus=8 --hours=24 command...
'''

def main():
    options = []
    i = 1
    while i < len(sys.argv) and sys.argv[i][0] == '-':
        options.append(sys.argv[i])
        i += 1
    command = sys.argv[i:]
    if not command:
        usage()
        return

    create_directories(home + '/.qarray-pid/scripts')
    script = write_shell_script(command, options)
    command = "qsub -V -q pool1 %s" % script
    #print command
    os.system(command)

if __name__ == '__main__':
    main()

